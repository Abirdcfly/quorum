// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum/go-ethereum/core (interfaces: PrivateStateMetadataResolver)

// Package psmr is a generated GoMock package.
package mps

import (
	context "context"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockPrivateStateMetadataResolver is a mock of PrivateStateMetadataResolver interface.
type MockPrivateStateMetadataResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateStateMetadataResolverMockRecorder
}

// MockPrivateStateMetadataResolverMockRecorder is the mock recorder for MockPrivateStateMetadataResolver.
type MockPrivateStateMetadataResolverMockRecorder struct {
	mock *MockPrivateStateMetadataResolver
}

// NewMockPrivateStateMetadataResolver creates a new mock instance.
func NewMockPrivateStateMetadataResolver(ctrl *gomock.Controller) *MockPrivateStateMetadataResolver {
	mock := &MockPrivateStateMetadataResolver{ctrl: ctrl}
	mock.recorder = &MockPrivateStateMetadataResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateStateMetadataResolver) EXPECT() *MockPrivateStateMetadataResolverMockRecorder {
	return m.recorder
}

// PSIs mocks base method.
func (m *MockPrivateStateMetadataResolver) PSIs() []types.PrivateStateIdentifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PSIs")
	ret0, _ := ret[0].([]types.PrivateStateIdentifier)
	return ret0
}

// PSIs indicates an expected call of PSIs.
func (mr *MockPrivateStateMetadataResolverMockRecorder) PSIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSIs", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).PSIs))
}

// ResolveForManagedParty mocks base method.
func (m *MockPrivateStateMetadataResolver) ResolveForManagedParty(arg0 string) (*PrivateStateMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveForManagedParty", arg0)
	ret0, _ := ret[0].(*PrivateStateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveForManagedParty indicates an expected call of ResolveForManagedParty.
func (mr *MockPrivateStateMetadataResolverMockRecorder) ResolveForManagedParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveForManagedParty", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).ResolveForManagedParty), arg0)
}

// ResolveForUserContext mocks base method.
func (m *MockPrivateStateMetadataResolver) ResolveForUserContext(arg0 context.Context) (*PrivateStateMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveForUserContext", arg0)
	ret0, _ := ret[0].(*PrivateStateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveForUserContext indicates an expected call of ResolveForUserContext.
func (mr *MockPrivateStateMetadataResolverMockRecorder) ResolveForUserContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveForUserContext", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).ResolveForUserContext), arg0)
}
