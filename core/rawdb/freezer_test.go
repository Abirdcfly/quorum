package rawdb

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
	"time"
)

// Releaser is an autogenerated mock type for the Releaser type
type releaserMock struct {
	mock.Mock
}

// Release provides a mock function with given fields:
func (_m *releaserMock) Release() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func newFreezerMock(t *testing.T) *freezer {
	mockLock := new(releaserMock)
	mockFreezer := &freezer{
		tables:       make(map[string]*freezerTable),
		instanceLock: mockLock,
		quit:         make(chan struct{}),
	}
	mockLock.On("Release").Return(nil)

	started := make(chan bool)
	go func() {
		started <- true
		select {
		case <-mockFreezer.quit:
			// message handled
		}
	}()
	<-started

	return mockFreezer
}

func Test_freezer_shouldClose_whenHaveSubscribers(t *testing.T) {
	// given
	mockFreezer := newFreezerMock(t)

	// when
	err := mockFreezer.Close()

	// then
	assert.Nil(t, err)
}

func Test_shouldCloseGracefully_whenNoSubscribers(t *testing.T) {
	// given
	mockFreezer := newFreezerMock(t)
	mockFreezer.Close() // should trigger channel close
	timeout := time.After(1 * time.Second)
	errCh := make(chan error)

	// when
	go func() {
		errCh <- mockFreezer.Close()
	}()

	// then
	select {
	case <-timeout:
		t.Fatal("freezer.Close() timed out")
	case err := <-errCh:
		assert.NotNil(t, err)
		assert.Equal(t, "[freezer DB process already stopped]", err.Error())
	}

}
